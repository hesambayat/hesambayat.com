{"version":3,"sources":["webpack:///./src/templates/document.js"],"names":["listSerializer","type","element","content","children","key","Elements","heading2","React","createElement","href","convertStringToId","text","titleSerializer","id","htmlSerializer","preformatted","className","heading1","heading3","heading4","heading5","heading6","data","document","prismic","markup","RichText","asText","title","_meta","firstPublicationDate","lastPublicationDate","description","uid","imageSharp","publicURL","section","map","slice","idx","render","sectiontitle","sectionbody","query"],"mappings":"2FAAA,0GAMMA,EAAiB,SAACC,EAAMC,EAASC,EAASC,EAAUC,GACxD,OAAIJ,IAASK,WAASC,SACb,KAGFC,IAAMC,cAAc,IAAK,CAAEJ,MAAKK,KAAK,IAAKC,YAAkBT,EAAQU,OAAWR,IAGlFS,EAAkB,SAACZ,EAAMC,EAASC,EAASC,EAAUC,GACzD,OAAIJ,IAASK,WAASC,SACb,KAGFC,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,OAASR,IAG3EW,EAAiB,SAACd,EAAMC,EAASC,EAASC,EAAUC,GACxD,OAAQJ,GACN,KAAKK,WAASU,aACZ,OAAOR,IAAMC,cAAc,MAAO,CAAEQ,UAAW,cAAeZ,OAAOD,GACvE,KAAKE,WAASY,SACZ,OAAOV,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,MAAM,IAASR,GACvF,KAAKE,WAASC,SACZ,OAAOC,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,MAAM,IAASR,GACvF,KAAKE,WAASa,SACZ,OAAOX,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,MAAM,IAASR,GACvF,KAAKE,WAASc,SACZ,OAAOZ,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,MAAM,IAASR,GACvF,KAAKE,WAASe,SACZ,OAAOb,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,MAAM,IAASR,GACvF,KAAKE,WAASgB,SACZ,OAAOd,IAAMC,cAAc,KAAM,CAAEJ,MAAKS,GAAIH,YAAkBT,EAAQU,MAAM,IAASR,GAEvF,QACE,OAAO,OAIE,sBAAe,IAAZmB,EAAW,EAAXA,KAChB,IAAKA,EAAM,MAAO,aADS,IAGnBC,EAAaD,EAAKE,QAAlBD,SACR,OAAKA,EAGH,oCACE,kBAAC,IAAD,CACEE,OAAQ,CACN,QAAS,UACT,SAAYC,WAASC,OAAOJ,EAASK,OACrC,KAAQF,WAASC,OAAOJ,EAASK,OACjC,cAAiBL,EAASM,MAAMC,qBAChC,aAAgBP,EAASM,MAAME,oBAC/B,YAAeL,WAASC,OAAOJ,EAASS,aACxC,YAAeN,WAASC,OAAOJ,EAASS,aACxC,IAAM,8BAA+BT,EAASM,MAAMI,IACpD,MAAQ,yBAA0BV,EAASW,WAAWC,aAE1D,kBAAC,IAAD,MACA,yBAAKnB,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,YAEXO,EAASa,QAAQC,KAAI,SAACC,EAAOC,GAC3B,OACE,kBAAC,WAAD,CAAUnC,IAAG,QAAUmC,EAAOC,OAAQF,EAAMG,aAAc3B,eAAgBf,SAMpF,yBAAKiB,UAAU,mBACb,gCACE,kBAAC,WAAD,CAAUwB,OAAQjB,EAASK,QAC3B,kBAAC,WAAD,CAAUY,OAAQjB,EAASS,eAG3BT,EAASa,QAAQC,KAAI,SAACC,EAAOC,GAC3B,OACE,yBAAKvB,UAAU,UAAUZ,IAAG,WAAamC,GACvC,kBAAC,WAAD,CAAUC,OAAQF,EAAMG,aAAc3B,eAAgBF,IACtD,kBAAC,WAAD,CAAU4B,OAAQF,EAAMI,YAAa5B,eAAgBA,aAUvE,kBAAC,IAAD,MACA,kBAAC,IAAD,OArDkB,kBAAC,IAAD,OA0DjB,IAAM6B,EAAK","file":"component---src-templates-document-js-290e645ed1672050c3ea.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport { RichText, Elements } from 'prismic-reactjs'\nimport { convertStringToId } from '../utils'\nimport * as Component from '../components'\n\nconst listSerializer = (type, element, content, children, key) => {\n  if (type !== Elements.heading2) {\n    return null\n  }\n\n  return React.createElement('a', { key, href: `#${convertStringToId(element.text)}` }, children)\n}\n\nconst titleSerializer = (type, element, content, children, key) => {\n  if (type !== Elements.heading2) {\n    return null\n  }\n\n  return React.createElement('h2', { key, id: convertStringToId(element.text) }, children)\n}\n\nconst htmlSerializer = (type, element, content, children, key) => {\n  switch (type) {\n    case Elements.preformatted:\n      return React.createElement('pre', { className: 'prettyprint', key }, children)\n    case Elements.heading1:\n      return React.createElement('h1', { key, id: convertStringToId(element.text, true) }, children)\n    case Elements.heading2:\n      return React.createElement('h2', { key, id: convertStringToId(element.text, true) }, children)\n    case Elements.heading3:\n      return React.createElement('h3', { key, id: convertStringToId(element.text, true) }, children)\n    case Elements.heading4:\n      return React.createElement('h4', { key, id: convertStringToId(element.text, true) }, children)\n    case Elements.heading5:\n      return React.createElement('h5', { key, id: convertStringToId(element.text, true) }, children)\n    case Elements.heading6:\n      return React.createElement('h6', { key, id: convertStringToId(element.text, true) }, children)\n\n    default:\n      return null\n  }\n}\n\nexport default ({ data }) => {\n  if (!data) return 'loading...'\n\n  const { document } = data.prismic\n  if (!document) return <Component.NotFound />\n\n  return (\n    <>\n      <Component.Schema\n        markup={{\n          \"@type\": \"Article\",\n          \"headline\": RichText.asText(document.title),\n          \"name\": RichText.asText(document.title),\n          \"datePublished\": document._meta.firstPublicationDate,\n          \"dateModified\": document._meta.lastPublicationDate,\n          \"articleBody\": RichText.asText(document.description),\n          \"description\": RichText.asText(document.description),\n          \"url\": `https://hesambayat.com/doc/${document._meta.uid}`,\n          \"image\": `https://hesambayat.com${document.imageSharp.publicURL}`\n        }} />\n      <Component.Header />\n      <div className=\"document\">\n        <div className=\"container\">\n          <div className=\"alignwide\">\n            <div className=\"row\">\n              <div className=\"col-12 col-lg-3\">\n                <div className=\"contents\">\n                  {\n                    document.section.map((slice, idx) => {\n                      return (\n                        <RichText key={`list-${idx}`} render={slice.sectiontitle} htmlSerializer={listSerializer} />\n                      )\n                    })\n                  }\n                </div>\n              </div>\n              <div className=\"col-12 col-lg-9\">\n                <header>\n                  <RichText render={document.title} />\n                  <RichText render={document.description} />\n                </header>\n                {\n                  document.section.map((slice, idx) => {\n                    return (\n                      <div className=\"section\" key={`section-${idx}`}>\n                        <RichText render={slice.sectiontitle} htmlSerializer={titleSerializer} />\n                        <RichText render={slice.sectionbody} htmlSerializer={htmlSerializer} />\n                      </div>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Component.Footer />\n      <Component.CodePrettify />\n    </>\n  )\n}\n\nexport const query = graphql`\n  query DocumentQuery($uid: String!) {\n    prismic {\n      document(lang:\"en-us\", uid: $uid) {\n        title\n        description\n        image\n        imageSharp {\n          publicURL\n        }\n        section {\n          ... on PRISMIC_DocumentSection {\n            sectionbody\n            sectiontitle\n          }\n        }\n        _meta {\n          uid\n          tags\n          firstPublicationDate\n          lastPublicationDate\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}