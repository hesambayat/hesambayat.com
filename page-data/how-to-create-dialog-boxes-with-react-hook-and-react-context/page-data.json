{"componentChunkName":"component---src-templates-post-js","path":"/how-to-create-dialog-boxes-with-react-hook-and-react-context","result":{"data":{"prismic":{"post":{"title":[{"type":"heading1","text":"How to create dialog boxes with React hook and React context","spans":[]}],"has_code":"Yes","excerpt":[{"type":"paragraph","text":"A dialog/modal box is an excellent method to interact with users and elicit a response from them. A dialog box represents critical information on top of the application and regularly used for notifications, alerts, or standalone actions such as subscription forms. ","spans":[]},{"type":"paragraph","text":"Without further ado, Let's jump into it and create a React hook based modal dialog box. We will kick this off by creating an React app, then we add our modal React hook, and finally, we wrap the app by a modal React context so we can show/hide modals from anywhere inside the app...","spans":[]}],"image":{"dimensions":{"width":1200,"height":630},"alt":null,"copyright":null,"url":"https://images.prismic.io/hesambayatcom/7380d9a8-f797-43d1-8fe0-aba51cd35010_photo-1564771492279-99929fb17ef4.jpeg?auto=compress,format&rect=0,137,1952,1025&w=1200&h=630","mobile":{"dimensions":{"width":630,"height":315},"alt":null,"copyright":null,"url":"https://images.prismic.io/hesambayatcom/7380d9a8-f797-43d1-8fe0-aba51cd35010_photo-1564771492279-99929fb17ef4.jpeg?auto=compress,format&rect=0,161,1952,976&w=630&h=315"}},"imageSharp":{"publicURL":"/static/7380d9a8-f797-43d1-8fe0-aba51cd35010_photo-1564771492279-99929fb17ef4-5fc51732e03dab07ee467a940ce74aca.jpeg"},"body":[{"type":"text","label":null,"primary":{"text":[{"type":"paragraph","text":"A dialog/modal box is an excellent method to interact with users and elicit a response from them. A dialog box represents critical information on top of the application and regularly used for notifications, alerts, or standalone actions such as subscription forms. ","spans":[]},{"type":"paragraph","text":"Without further ado, Let's jump into it and create a React hook based modal dialog box. We will kick this off by creating an React app, then we add our modal React hook, and finally, we wrap the app by a modal React context so we can show/hide modals from anywhere inside the app.","spans":[]},{"type":"heading3","text":"Set up your environment","spans":[]},{"type":"paragraph","text":"Youâ€™ll need to have Node >= 8.10 and Yarn >= 0.25 on your local development machine. Let's ensure that you have the right versions installed, by running following command in the Terminal:","spans":[{"start":0,"end":84,"type":"strong"}]},{"type":"preformatted","text":"$ node -v && yarn -v\n# [NODE VERSION]\n# [YARN VERSION]","spans":[]},{"type":"paragraph","text":"You should be able to see your Node version followed by Yarn versions.","spans":[]},{"type":"heading3","text":"Quick start with a new React app","spans":[]},{"type":"paragraph","text":"We are going to take advantage of the \"Create React App\" and install a fresh React app at once. If you already installed the npm create-react-app package globally, perhaps you want to uninstall the package or remove it manually as it's not supported anymore, see the reported issue. Let's create a new React app and name it react-modal-app by running:","spans":[{"start":129,"end":145,"type":"label","data":{"label":"code"}},{"start":259,"end":281,"type":"hyperlink","data":{"link_type":"Web","url":"https://stackoverflow.com/a/59189242/2131534","target":"_blank"}},{"start":324,"end":339,"type":"strong"}]},{"type":"preformatted","text":"$ yarn create react-app react-modal-app","spans":[]},{"type":"paragraph","text":"See: Get started with React App for more create app methods.","spans":[{"start":0,"end":60,"type":"label","data":{"label":"note"}},{"start":0,"end":4,"type":"strong"},{"start":5,"end":31,"type":"hyperlink","data":{"link_type":"Web","url":"https://create-react-app.dev/docs/getting-started/","target":"_blank"}}]},{"type":"paragraph","text":"Time to run the app","spans":[]},{"type":"preformatted","text":"$ cd react-modal-app","spans":[]},{"type":"preformatted","text":"$ yarn start","spans":[]},{"type":"paragraph","text":"Then open http://localhost:3000/ to see your app. ðŸŽ‰","spans":[{"start":10,"end":32,"type":"hyperlink","data":{"link_type":"Web","url":"http://localhost:3000/","target":"_blank"}}]},{"type":"heading3","text":"Create your modal","spans":[]},{"type":"paragraph","text":"Create the context folder","spans":[]},{"type":"preformatted","text":"$ mkdir src/context","spans":[]},{"type":"paragraph","text":"Create the context file","spans":[]},{"type":"preformatted","text":"$ touch src/context/modal-context.js","spans":[]},{"type":"paragraph","text":"Your files and folders should look like this:","spans":[]},{"type":"preformatted","text":"react-modal-app/\n| ...\nâ”œâ”€â”€ src/\n|   â”œâ”€â”€ context/\n|   |   | modal-context.js","spans":[]},{"type":"paragraph","text":"Now we created our context files, Let's code the modal-context.js by importing dependencies:","spans":[{"start":49,"end":65,"type":"strong"}]},{"type":"preformatted","text":"import React, { useCallback, useEffect, useState } from 'react'","spans":[]},{"type":"paragraph","text":"Create a React context","spans":[]},{"type":"preformatted","text":"const ModalContext = React.createContext()","spans":[]},{"type":"paragraph","text":"Declare the modal component","spans":[]},{"type":"preformatted","text":"const Modal = () => {}","spans":[]},{"type":"paragraph","text":"Create a context provider","spans":[]},{"type":"preformatted","text":"const ModalProvider = props => {\n  const [modal, setModal] = useState()\n  const unSetModal = useCallback(() => {\n    setModal()\n  }, [setModal])\n\n  return (\n    <ModalContext.Provider value={{ unSetModal, setModal }} {...props} >\n      {props.children}\n      {modal && <Modal modal={modal} unSetModal={unSetModal} />}\n    </ModalContext.Provider>\n  )\n}","spans":[]},{"type":"paragraph","text":"Perfect, Now we are able to wrap our app with the newly created context provider, with this we can render our dialog message from the modal value state on the screen, we also want to be able to close the dialog box, or technically change the modal state to null or undefined, that being said, to showing a dialog we do setModal(<Example/>) and to hiding any dialog box we only need to do  setModal(null|undefined).","spans":[{"start":319,"end":339,"type":"label","data":{"label":"code"}},{"start":389,"end":413,"type":"label","data":{"label":"code"}}]},{"type":"paragraph","text":"Nevertheless, we create an unset model method and pass it onto the app context and Modal component, Even though this might look unnecessary, it will be a savior when we want to close the modal if a user clicks on close (X) button or hits ESC key, so let's give it a shot. ðŸ¤ª","spans":[]},{"type":"paragraph","text":"Create a custom hook","spans":[]},{"type":"preformatted","text":"const useModal = () => {\n  const context = React.useContext(ModalContext)\n  if (context === undefined) {\n    throw new Error('useModal must be used within a UserProvider')\n  }\n\n  return context\n}","spans":[]},{"type":"paragraph","text":"Ok, now we got the useModal hook which is carrying out unSetModal and setModal methods those are responsible for showing and hiding modals, later on, its time to finish off the Modal component that we declared earlier","spans":[{"start":19,"end":27,"type":"label","data":{"label":"code"}},{"start":55,"end":65,"type":"label","data":{"label":"code"}},{"start":70,"end":78,"type":"label","data":{"label":"code"}},{"start":177,"end":183,"type":"strong"}]},{"type":"preformatted","text":"const Modal = ({ modal, unSetModal }) => {\n  useEffect(() => {\n    const bind = e => {\n      if (e.keyCode !== 27) {\n        return\n      }\n\n      if (document.activeElement && ['INPUT', 'SELECT'].includes(document.activeElement.tagName)) {\n        return\n      }\n\n      unSetModal()\n    }\n\n    document.addEventListener('keyup', bind)\n    return () => document.removeEventListener('keyup', bind)\n  }, [modal, unSetModal])\n\n  return (\n    <div className=\"modal\">\n      <button className=\"modal__close\" onClick={unSetModal} />\n      <div className=\"modal__inner\">\n        <button className=\"modal__close-btn\" onClick={unSetModal}>\n          <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" focusable=\"false\">\n            <path d=\"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\"></path>\n          </svg>\n        </button>\n        {modal}\n      </div>\n    </div>\n  )\n}","spans":[]},{"type":"paragraph","text":"This component only will be used by the provider internally, it basically renders a div.modal, a close (X) button, an overly close button which let users click anywhere outside the modal and close the dialog box among the dialog content itself {modal}, further this component binds unSetModal to a keyup event listener and dismisses the dialog when the user hits ESC key.","spans":[{"start":84,"end":93,"type":"label","data":{"label":"code"}},{"start":244,"end":251,"type":"label","data":{"label":"code"}},{"start":282,"end":292,"type":"label","data":{"label":"code"}},{"start":298,"end":303,"type":"label","data":{"label":"code"}}]},{"type":"paragraph","text":"Finally, Export the dialog provider and dialog hook we just built ","spans":[]},{"type":"preformatted","text":"export { ModalProvider, useModal }","spans":[]},{"type":"paragraph","text":"In the end, your modal-context.js file will look like this (see the file on github.com)","spans":[{"start":17,"end":33,"type":"strong"}]},{"type":"paragraph","text":"Congratulations on making it this far! ðŸŽŠWe are done with the modal core functions, but we still need to wrap the app with context provider, call the useModal hooks and finally add some styles to our little dialog box.","spans":[{"start":0,"end":39,"type":"em"},{"start":150,"end":158,"type":"label","data":{"label":"code"}}]},{"type":"paragraph","text":"Letâ€™s wrap the app with the modal context provider we just created, to do so, open up src/index.js","spans":[{"start":86,"end":98,"type":"strong"}]},{"type":"paragraph","text":"Import the modal provider by adding","spans":[]},{"type":"preformatted","text":"import { ModalProvider } from './context/modal-context'","spans":[]},{"type":"paragraph","text":" And wrap up the entire <App> with <ModalProvider> like so: (see the file on github.com)","spans":[{"start":24,"end":29,"type":"label","data":{"label":"code"}},{"start":35,"end":50,"type":"label","data":{"label":"code"}}]},{"type":"preformatted","text":"ReactDOM.render(\n  <ModalProvider>\n    <App />\n  </ModalProvider>,\n  document.getElementById('root')\n)","spans":[]},{"type":"paragraph","text":"Fun round! Generating a modal; What we want is the user clicks on a button and a dialog box pops up, to get that working, open up src/App.js and import the modal hook","spans":[{"start":130,"end":140,"type":"strong"}]},{"type":"preformatted","text":"import { useModal } from './context/modal-context'","spans":[]},{"type":"paragraph","text":"Now use the hook inside the App component","spans":[]},{"type":"preformatted","text":"const { setModal } = useModal()","spans":[]},{"type":"paragraph","text":"Lastly, create an element and attach the setModal to the onClick attribute (see the file on github.com)","spans":[{"start":41,"end":49,"type":"label","data":{"label":"code"}}]},{"type":"preformatted","text":"<label\n  className=\"App-link\"\n  onClick={() => {\n    setModal(<h1>Hola senora!</h1>)\n  }}\n>\n  Start a dialogue\n</label>","spans":[]},{"type":"paragraph","text":"By now, if you open up your browser you should be able to click on \"Start a dialogue\" button and see this:","spans":[]}]}},{"type":"image","label":"full-width","primary":{"imageBlock":{"dimensions":{"width":1920,"height":850},"alt":null,"copyright":null,"url":"https://images.prismic.io/hesambayatcom/d65f4886-c04c-456c-af0f-68a48e79a686_dialog-00.gif?auto=compress,format&rect=0,0,960,425&w=1920&h=850","mobile":{"dimensions":{"width":720,"height":319},"alt":null,"copyright":null,"url":"https://images.prismic.io/hesambayatcom/d65f4886-c04c-456c-af0f-68a48e79a686_dialog-00.gif?auto=compress,format&rect=0,0,959,425&w=720&h=319"}},"imageBlockSharp":{"publicURL":"/static/d65f4886-c04c-456c-af0f-68a48e79a686_dialog-00-7e81af70c27d2e88eddb47924ff735fc.gif","childImageSharp":null}}}],"_meta":{"uid":"how-to-create-dialog-boxes-with-react-hook-and-react-context","tags":["ReactJS","React Hooks","React Contexts","Modals","Dialogue Window","React Create App","NodeJS","Yarn"],"firstPublicationDate":"2019-11-28T18:59:00+0000","lastPublicationDate":"2019-12-09T20:25:16+0000"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"rootQuery":"\n  query PostQuery($uid: String!) {\n    prismic {\n      post(lang:\"en-us\", uid: $uid) {\n        title\n        has_code\n        excerpt\n        image\n        imageSharp {\n          publicURL\n        }\n        body {\n          ... on PRISMIC_PostBodyImage {\n            type\n            label\n            primary {\n              imageBlock\n              imageBlockSharp {\n                publicURL\n                childImageSharp {\n                  fluid {\n                    ...GatsbyImageSharpFluid_withWebp\n                  }\n                }\n              }\n            }\n          }\n          ... on PRISMIC_PostBodyText {\n            type\n            label\n            primary {\n              text\n            }\n          }\n        }\n        _meta {\n          uid\n          tags\n          firstPublicationDate\n          lastPublicationDate\n        }\n      }\n    }\n  }\n","id":"XeAY7xEAADSwKlk-","lang":"en-us","uid":"how-to-create-dialog-boxes-with-react-hook-and-react-context","alternateLanguages":[]}}}