{"version":3,"sources":["webpack:///./src/templates/post.js"],"names":["data","post","prismic","htmlSerializer","type","element","content","children","key","Elements","preformatted","React","createElement","className","markup","RichText","asText","title","_meta","firstPublicationDate","lastPublicationDate","excerpt","uid","imageSharp","publicURL","render","published","updated","body","map","slice","idx","primary","text","imageBlockSharp","childImageSharp","fluid","label","style","paddingTop","imageBlock","dimensions","height","width","src","alt","has_code","query"],"mappings":"6FAAA,mHAMe,sBAAe,IAAZA,EAAW,EAAXA,KAChB,IAAKA,EAAM,MAAO,aADS,IAGnBC,EAASD,EAAKE,QAAdD,KACR,IAAKA,EAAM,OAAO,kBAAC,IAAD,MAElB,IAAME,EAAiB,SAACC,EAAMC,EAASC,EAASC,EAAUC,GACxD,OAAQJ,GACN,KAAKK,WAASC,aACZ,OAAOC,IAAMC,cAAc,MAAO,CAAEC,UAAW,cAAeL,OAAOD,GAEvE,QACE,OAAO,OAIb,OACE,oCACE,kBAAC,IAAD,CACEO,OAAQ,CACN,QAAS,UACT,SAAYC,WAASC,OAAOf,EAAKgB,OACjC,KAAQF,WAASC,OAAOf,EAAKgB,OAC7B,cAAiBhB,EAAKiB,MAAMC,qBAC5B,aAAgBlB,EAAKiB,MAAME,oBAC3B,YAAeL,WAASC,OAAOf,EAAKoB,SACpC,YAAeN,WAASC,OAAOf,EAAKoB,SACpC,IAAM,0BAA2BpB,EAAKiB,MAAMI,IAC5C,MAAQ,yBAA0BrB,EAAKsB,WAAWC,aAEtD,kBAAC,IAAD,MACA,yBAAKX,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,kBAAC,WAAD,CAAUY,OAAQxB,EAAKgB,QACvB,2BACE,kBAAC,IAAD,CAA0BS,UAAWzB,EAAKiB,MAAMC,qBAAsBQ,QAAS1B,EAAKiB,MAAME,uBAG1FnB,EAAK2B,KAAKC,KAAI,SAACC,EAAOC,GACpB,MAAmB,SAAfD,EAAM1B,KACD,kBAAC,WAAD,CAAUI,IAAG,SAAWuB,EAAON,OAAQK,EAAME,QAAQC,KAAM9B,eAAgBA,IAGjE,UAAf2B,EAAM1B,KAEJ0B,EAAME,QAAQE,gBAAgBC,gBACzB,kBAAC,IAAD,CAAK3B,IAAG,SAAWuB,EAAOK,MAAON,EAAME,QAAQE,gBAAgBC,gBAAgBC,MAAOvB,UAAWiB,EAAMO,QAI9G,yBAAK7B,IAAG,SAAWuB,EAAOlB,UAAS,iBAAmBiB,EAAMO,OAC1D,yBAAKC,MAAO,CACVC,WAAgBT,EAAME,QAAQQ,WAAWC,WAAWC,OAASZ,EAAME,QAAQQ,WAAWC,WAAWE,MAAS,IAAhG,OAEZ,yBACEC,IAAKd,EAAME,QAAQE,gBAAgBV,UACnCqB,IAAKf,EAAME,QAAQQ,WAAWK,IAC9BF,MAAOb,EAAME,QAAQQ,WAAWC,WAAWE,MAC3CD,OAAQZ,EAAME,QAAQQ,WAAWC,WAAWC,UAM7C,QAGX,kBAAC,IAAD,SAIN,kBAAC,IAAD,MACmB,QAAlBzC,EAAK6C,UAAsB,kBAAC,IAAD,QAK3B,IAAMC,EAAK","file":"component---src-templates-post-js-b67250eb6cfb1f671efa.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport { RichText, Elements } from 'prismic-reactjs'\nimport Img from 'gatsby-image'\nimport * as Component from '../components'\n\nexport default ({ data }) => {\n  if (!data) return 'loading...'\n\n  const { post } = data.prismic\n  if (!post) return <Component.NotFound />\n\n  const htmlSerializer = (type, element, content, children, key) => {\n    switch (type) {\n      case Elements.preformatted:\n        return React.createElement('pre', { className: 'prettyprint', key }, children)\n\n      default:\n        return null\n    }\n  }\n\n  return (\n    <>\n      <Component.Schema\n        markup={{\n          \"@type\": \"Article\",\n          \"headline\": RichText.asText(post.title),\n          \"name\": RichText.asText(post.title),\n          \"datePublished\": post._meta.firstPublicationDate,\n          \"dateModified\": post._meta.lastPublicationDate,\n          \"articleBody\": RichText.asText(post.excerpt),\n          \"description\": RichText.asText(post.excerpt),\n          \"url\": `https://hesambayat.com/${post._meta.uid}`,\n          \"image\": `https://hesambayat.com${post.imageSharp.publicURL}`\n        }} />\n      <Component.Header />\n      <div className=\"post\">\n        <div className=\"container\">\n          <div className=\"aligncenter\">\n            <RichText render={post.title} />\n            <p>\n              <Component.DateWithUpdate published={post._meta.firstPublicationDate} updated={post._meta.lastPublicationDate} />\n            </p>\n            {\n              post.body.map((slice, idx) => {\n                if (slice.type === 'text') {\n                  return <RichText key={`slice-${idx}`} render={slice.primary.text} htmlSerializer={htmlSerializer} />\n                }\n\n                if (slice.type === 'image') {\n\n                  if (slice.primary.imageBlockSharp.childImageSharp) {\n                    return <Img key={`slice-${idx}`} fluid={slice.primary.imageBlockSharp.childImageSharp.fluid} className={slice.label} />\n                  }\n\n                  return (\n                    <div key={`slice-${idx}`} className={`image-wrapper ${slice.label}`}>\n                      <div style={{\n                        paddingTop: `${(slice.primary.imageBlock.dimensions.height / slice.primary.imageBlock.dimensions.width) * 100}%`\n                      }} />\n                      <img\n                        src={slice.primary.imageBlockSharp.publicURL}\n                        alt={slice.primary.imageBlock.alt}\n                        width={slice.primary.imageBlock.dimensions.width}\n                        height={slice.primary.imageBlock.dimensions.height}\n                      />\n                    </div>\n                  )\n                }\n\n                return null\n              })\n            }\n            <Component.Bio />\n          </div>\n        </div>\n      </div>\n      <Component.Footer />\n      {post.has_code === 'Yes' && <Component.CodePrettify />}\n    </>\n  )\n}\n\nexport const query = graphql`\n  query PostQuery($uid: String!) {\n    prismic {\n      post(lang:\"en-us\", uid: $uid) {\n        title\n        has_code\n        excerpt\n        image\n        imageSharp {\n          publicURL\n        }\n        body {\n          ... on PRISMIC_PostBodyImage {\n            type\n            label\n            primary {\n              imageBlock\n              imageBlockSharp {\n                publicURL\n                childImageSharp {\n                  fluid {\n                    ...GatsbyImageSharpFluid_withWebp\n                  }\n                }\n              }\n            }\n          }\n          ... on PRISMIC_PostBodyText {\n            type\n            label\n            primary {\n              text\n            }\n          }\n        }\n        _meta {\n          uid\n          tags\n          firstPublicationDate\n          lastPublicationDate\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}